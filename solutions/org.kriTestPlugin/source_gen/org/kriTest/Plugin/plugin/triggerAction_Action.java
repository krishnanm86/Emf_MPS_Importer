package org.kriTest.Plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.annotations.NotNull;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;

public class triggerAction_Action extends BaseAction {
  private static final Icon ICON = null;

  public triggerAction_Action() {
    super("Import Ecore File", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
    this.setMnemonic("E".charAt(0));
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    JFileChooser fileChooser = new JFileChooser();
    FileFilter fileFilter = new FileNameExtensionFilter("Ecore files", "ecore");
    fileChooser.setFileFilter(fileFilter);
    int result = fileChooser.showOpenDialog(null);
    if (result == JFileChooser.APPROVE_OPTION) {
      String ecoreFilename = fileChooser.getSelectedFile().getAbsolutePath();
      EPackage ecoreModel = triggerAction_Action.this.getEcoreModel(ecoreFilename, event);
      System.out.println(ecoreModel.getName());
      triggerAction_Action.this.prettyPrintEPackage(ecoreModel, event);
    }
  }
  public EPackage getEcoreModel(String fileName, final AnActionEvent event) {
    // Uses the EMF Api to gather the Ecore model as an EPackage given a fully qualified path to an ecore file as input 
    Resource retResource = triggerAction_Action.this.getEcoreMetaModel(fileName, event);
    // TODO: Remove hack. Ugly cast to EPackage and also hard coded return of the first element in the Resource Set. 
    EPackage retPackage = null;
    try {
      retPackage = ((EPackage) retResource.getContents().get(0));
    } catch (Exception e) {
      System.out.println("Somethign went wrong with parsing the Resource");
      System.out.println(e.getMessage());
    }
    return retPackage;
  }
  public Resource getEcoreMetaModel(String fileName, final AnActionEvent event) {
    // Uses the EMF Api to gather the Ecore meta model as an EMF Resource given a fully qualified path to an ecore file as input 
    ResourceSet resourceSet = new ResourceSetImpl();
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put("ecore", new EcoreResourceFactoryImpl());
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl());
    return resourceSet.getResource(URI.createFileURI(fileName), true);
  }
  public void prettyPrintEPackage(EPackage epackage, final AnActionEvent event) {
    EList contents = epackage.eContents();
    for (Object content : contents) {
      EObject contentasEObject = (EObject) content;
      System.out.println(contentasEObject);
    }
  }
}
